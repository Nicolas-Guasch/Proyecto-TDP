@startuml
skinparam classAttributeIconSize 0
package Engine{
    interface IEngine{
        +{abstract}suscribeToUpdate(object:GameObject)
        +{abstract}suscribeToUpdate(component:Component )
        +{abstract}waitForFrames(action:Action, frames:int )
        +{abstract}start();
        +{abstract}Pauser():CorePauser
        +{abstract}frameCounter():long
    }

    interface Action{
        invoke()
    }

    IUpdatable <|-- Component
    IUpdatable <|-- GameObject

    interface IUpdatable {
        +update():void
    }

    interface Condition{
        +ask():boolean
    }

    Consumer <|-- OperationUpdate

    class OperationUpdate{

        -toUpdate:IUpdatable
        +OperationUpdate(IUpdatable toUpdate)
        +accept(Object o):void
    }

    IEngine <|-- MyEngine
    MyEngine -- "1" Core
    MyEngine -- "2" IBroadcaster
    class MyEngine{
        #MyEngine();
        +suscribeToUpdate(object:GameObject)+
        +suscribeToUpdate(component:Component )+
        +waitForFrames(action:Action , frames:int )+
        +start();+
        +Pauser():CorePauser+
        +frameCounter():long+
    }

    interface IActivable{
        isActive:boolean
        setActive(a:boolean)
    }

    class Clock{
        currentTimeNanos():long
    }

    IActivable <|-- Component
    Component -- "1" GameObject
    abstract class Component{
        -active:boolean=true
        +start()
        +update()
        #frameCounter():long
        +OnEnable()
        +OnDisable()
        +OnDestroy()
        +DestroyComponent()
        +DestroyComponent()
        +transform():Transform
        #setGameObject(ref:GameObject)
        +gameObject():GameObject
        +isActive:boolean+
        +setActive(a:boolean)+
    }

    Interface IGameObject
        {
            +{static} getRoot():GameObject
            -GameObject()
            -GameObject(parent:GameObject)
            +addHitBox(c:HitBox ):HitBox
            +<S extends Component> addComponent(S c):S

            +getComponents():Iterable<Component>
            +void sendMessage( consumer:Consumer<Component>)

            +<C extends Component> addChild(Iterable<C> components):GameObject
            +addChild():GameObject
            +removeComponent(c:Component )
            +transform():Transform
            +destroy()
            -onDestroy:Action
            +setOnDestroy(a:Action )
            +getHitbox():HitBox
            +size():int
            -renderer:Renderizable
            +setRenderer(rend:Renderizable)
            +getRenderer():Renderizable
        }

    GameObject -- "1" GameObject:root
    note left on link: static
    GameObject -- "*"GameObject:children,parent
    GameObject -- "*"Component
    GameObject -- "1"Transform
    GameObject -- "1"HitBox
    class GameObject
    {
        +{static} getRoot():GameObject
        -GameObject()
        -GameObject(parent:GameObject)
        +addHitBox(c:HitBox ):HitBox
        +<S extends Component> addComponent(S c):S

        +getComponents():Iterable<Component>
        +void sendMessage( consumer:Consumer<Component>)

        +<C extends Component> addChild(Iterable<C> components):GameObject
        +addChild():GameObject
        +removeComponent(c:Component )
        +transform():Transform
        +Update()
        +destroy()
        -onDestroy:Action
        +setOnDestroy(a:Action )
        +getHitbox():HitBox
        +size():int
        -renderer:Renderizable
        +setRenderer(rend:Renderizable)
        +getRenderer():Renderizable
    }

    Component <|-- Transform
    Transform -- "2"  Vector2: position,top
    class Transform{
        -ZCompontent:float
        -lifetime:int

        +Transform()
        -Transform(position:Vector2)
        +update()+
        +position():Vector2
        +position3():Vector3
        +top():Vector2
        +top(length:float):Vector2
        +setPosition(position:Vector2)
        +setTop(position:Vector2)
        +rotate(angle:float)
        +setFromPrototype(prototype:Transform)
        +moveTowards(direction:Vector2)
        +getZcomponent():float
        +setZcomponent()
        +getLifetime():int
    }

    Core -- "1" Core:instance
    note on link: static
    Core -- "4" IBroadcaster
    Core -- "2" Invoker
    Core -- "*" Action: Actions for each frame
    class Core{
        -FPS:short
        -paused:boolean
        -currentFrame:long
        -exit:boolean
        -debt:long

        #{static}getInstance():Core
        -Core()
        -clean()
        -endOfFrame()
        -mainLoop()
        -sleep(time:long)
        +Start()
        +waitForSeconds(action:Action,seconds:float)
        +waitForFrames(action:Action,frames:int)

        +setPaused(p:boolean)
        +isPaused():boolean
        +frameCounter():long
    }

    KeyListener <|-- CorePauser
    CorePauser -- "1" CorePauser:instance
    note left on link: static
    CorePauser -- "1" Core
    class CorePauser
    {
        -paused = false:boolean
        -CorePauser()
        +{static} CorePauser Instance()

        +keyTyped(e:KeyEvent )+
        +keyPressed(e:KeyEvent ) +
        +keyReleased(e:KeyEvent ) +
    }

    Component <|-- DoWhen
    class DoWhen {
        -cond:boolean
        -condition:Condition
        -codeBlock:Action
        +DoWhen(condition:Condition, Action action)
        +update()+
    }

    EngineGetter -- "1" EngineGetter:instance
    note left on link: static
    EngineGetter -- "1" IEngine
    class EngineGetter
    {
        + {static}  Instance():EngineGetter
        - EngineGetter()
        +get():IEngine
    }


    Component <|-- While
    class While
    {
        -condition:Condition
        -codeBlock:Action
        -onComplete:Action
        -cond:boolean
        -runs:boolean

        +While(condition:Condition ,codeBlock:Action)

        +update()+
        -checks():Boolean
        +Excecute()

        +OnComplete(onComplete:Action )
    }






}


@enduml
