@startuml

package ADTs{
    IVector2 <|-- Vector2
    interface IVector2{
        +x():float
        +y():float
        +sum(other : IVector2):IVector2
        +sub(other : IVector2):IVector2
        +scalarProd(other : IVector2):float
        +length():float
        +lengthSq():float
        +div(real:float):IVector2
        +prod(real:float):IVector2
        +norma():IVector2
        +rot(angle:float):IVector2
        +get(double xx, double yy):IIVector2
        +getAngle(other:IVector2):float
        +rotateUnary(angle:float):IVector2
        +getUnaryAngle(other:IVector2):float
        +near(other:IVector2):boolean
        +equals(other:IVector2):boolean ++
        +swapped():IVector2
        +mirrorY():IVector2
        +mirrorX():IVector2
        +withLength(length:float):IVector2
        +getRight():IVector2
        +getRight(length:float):IVector2
        +distanceTo(other:IVector2):float
        +half():IVector2
        +isOver(other:IVector2):boolean
        +isUnder(other:IVector2):boolean
        +isLeft(other:IVector2):boolean
        +isRight(other:IVector2):boolean
        +v3(z:float):Vector3
        +v3():Vector3
        +withMaxLength(max:float):IVector2
        +toDimension():Dimension
    }

    class Vector2{
        +{static}ORIGIN() : IVector2
        +{static}UP() : IVector2
        +{static}DOWN() : IVector2
        +{static}LEFT() : IVector2
        +{static}RIGHT() : IVector2
        +{static}UP(length : float) : IVector2
        +{static}DOWN(length : float) : IVector2
        +{static}LEFT(length : float) : IVector2
        +{static}RIGHT(length : float) : IVector2
        - {static} Epsilon:float = 0.01f
        - x : float
        - y : float
        +{static} random() : IVector2
        +{static} random(large: float) : IVector2


        +x():float
        +y():float
        +Vector2(x1,y1 : double)
        +Vector2(x1,y1 : float)
        +sum(other : IVector2):IVector2
        +sub(other : IVector2):IVector2
        +scalarProd(other : IVector2):float
        +length():float
        +lengthSq():float
        +div(real:float):IVector2
        +prod(real:float):IVector2
        +norma():IVector2
        +rot(angle:float):IVector2
        +get(double xx, double yy):IIVector2
        +getAngle(other:IVector2):float
        +rotateUnary(angle:float):IVector2
        +getUnaryAngle(other:IVector2):float
        +near(other:IVector2):boolean
        +equals(other:IVector2):boolean ++
        +swapped():IVector2
        +mirrorY():IVector2
        +mirrorX():IVector2
        +withLength(length:float):IVector2
        +getRight():IVector2
        +getRight(length:float):IVector2
        +distanceTo(other:IVector2):float
        +half():IVector2
        +isOver(other:IVector2):boolean
        +isUnder(other:IVector2):boolean
        +isLeft(other:IVector2):boolean
        +isRight(other:IVector2):boolean
        +v3(z:float):Vector3
        +v3():Vector3
        +withMaxLength(max:float):IVector2
        +toDimension():Dimension
        +toString():String++
    }

    interface IRect{
        +max():IVector2
        +prod(float factor):Rect
    }


    IRect <|-- Rect

    class Rect
    {
        -min:Vector2
        -max:Vector2
        +Rect(max:Vector2,min:Vector2)
        +max():Vector2
        +prod(factor:float):Rect
        +clone() : Rect +
    }

    interface IRowCol {
        +getCol():int
        +getRow():int
    }

    IRowCol <|-- RowCol

    class RowCol
    {
        -row:int
        -col:int
        + RowCol(row:int,col:int)
        +getCol():int
        +getRow():int
    }

    ITuple <|-- Tuple

    interface ITuple<T1,T2>{
        get2():T2
        get1():T1
    }

    class Tuple<T1,T2>{
        -element1:T1
        -element2:T2
        +Tuple(element1:T1,element2:T2)
        +{static}<TA,TB> get(TA c1, TB c2) :Tuple<TA,TB>
        + get2():T2
        + get1():T1
    }

    interface IVector3 {
        xy():IVector2
        z():float
    }
    IVector3 <|-- Vector3

    class Vector3{
        - x:float
        - y:float
        - z:float
        +Vector3(x,y,z : float)
        +{static} get(x,y,z : float) : IVector3
        + xy():IVector2
        + z():float
    }
}

@enduml