@startuml

abstract class TimePoint{
    + {abstract} assembleMoment()
    + {abstract} startMoment()
    + {abstract} complete():bool
}
TimeLine --|> Component
TimeLine "levels" o--- "0..*" TimePoint

class TimeLine
{
    -{static}instance : TimeLine
    +{static}getInstance() : TimeLine
    -currentlevel:int
    +TimeLine()
    +update()++
    -hasNextLevel():bool
    +currentLevel():TimePoint
    - runLevel()
    + playLevel()
}

SomeBarricades --|> TimePoint

BarricadeBothDirector "1" --o "director" SomeBarricades

class SomeBarricades{
    +SomeBarricades()
    nextBarricade():Entity
    + assembleMoment()+
    + startMoment()+
    + complete():bool+
}
RemoveDeathStar ---|> TimePoint

class RemoveDeathStar{
    + assembleMoment()+
    + startMoment()+
    + complete():bool+
}

PutDeathStar ---|> TimePoint

class PutDeathStar{
    + assembleMoment()+
    + startMoment()+
    + complete():bool+
}

TransitionToBoss ---|> TimePoint

class TransitionToBoss{
    + assembleMoment()+
    + startMoment()+
    + complete():bool+
}



PlayerAssembler ---|> TimePoint

class PlayerAssembler{
    + assembleMoment()+
    + startMoment()+
    + complete():bool+
}



Level ---|> TimePoint

class Level{
private Collection<Entity> rewards;
    - ILevelsData parser;
    - EnemyShipDirector director;
    - BarricadeBothDirector directorBboth;
    - BarricadeEnemDirector directorBenem;
    - int number;
    - boolean levelRunning = false;

    + assembleMoment()+
    + startMoment()+
    + complete():bool+
}


TransitionToLevel ---|> TimePoint

class TransitionToLevel{
    + assembleMoment()+
    + startMoment()+
    + complete():bool+
}

class GameManager{
    -{static} instance:GameManager
    +{static} getInstance:GameManager
    +GameManager()
    +StartGame()
}



@enduml