@startuml

package GameTimeLine{
    abstract class TimePoint{
        + {abstract} assembleMoment()
        + {abstract} startMoment()
        + {abstract} complete():bool
    }
    TimeLine --|> Component
    TimeLine "levels" o--- "0..*" TimePoint

    class TimeLine
    {
        -{static}instance : TimeLine
        +{static}getInstance() : TimeLine
        -currentlevel:int
        +TimeLine()
        +update()++
        -hasNextLevel():bool
        +currentLevel():TimePoint
        - runLevel()
        + playLevel()
        -activeTrue():void
    }

    SomeBarricades --|> TimePoint

    BarricadeBothDirector "1" --o "director" SomeBarricades

    class SomeBarricades{
        +SomeBarricades()
        nextBarricade():Entity
        + assembleMoment()+
        + startMoment()+
        + complete():bool+
    }
    RemoveDeathStar ---|> TimePoint

    class RemoveDeathStar{
        + assembleMoment()+
        + startMoment()+
        + complete():bool+
    }

    PutDeathStar ---|> TimePoint

    class PutDeathStar{
        + assembleMoment()+
        + startMoment()+
        + complete():bool+
    }

    TransitionToBoss ---|> TimePoint

    class TransitionToBoss{
        + assembleMoment()+
        + startMoment()+
        + complete():bool+
        - perfectSpeed():boolean
        - changeSpeed(): void
    }



    PlayerAssembler ---|> TimePoint

    class PlayerAssembler{
        + assembleMoment()+
        + startMoment()+
        + complete():bool+
        - setReady():void
    }



    Level ---|> TimePoint

    class Level{
    private Collection<Entity> rewards;
        - ILevelsData parser;
        - EnemyShipDirector director;
        - BarricadeBothDirector directorBboth;
        - BarricadeEnemDirector directorBenem;
        - int number;
        - boolean levelRunning = false;

        + assembleMoment()+
        + startMoment()+
        + complete():bool+
    }


    TransitionToLevel ---|> TimePoint

    class TransitionToLevel{
        + assembleMoment()+
        + startMoment()+
        + complete():bool+
        - setReadyTrue():void
    }

    class GameManager{
        -{static} instance:GameManager
        +{static} getInstance:GameManager
        +GameManager()
        +StartGame()
    }

    class BossLevel extends TimePoint {

        -ShipStatus ShipStatus
        -EnemyShipDirector director
        -boolean playing=false
        vader:BaseEnemyShip

        +BossLevel(EnemyShipBuilder builder)

        +assembleMoment():void
        +startMoment():void
        +completed():boolean
        +clean():void
        -makePlaying():void
    }
}


@enduml
