@startuml

class Vector2{
    +{static}ORIGIN() : Vector2
    +{static}UP() : Vector2
    +{static}DOWN() : Vector2
    +{static}LEFT() : Vector2
    +{static}RIGHT() : Vector2
    +{static}UP(length : float) : Vector2
    +{static}DOWN(length : float) : Vector2
    +{static}LEFT(length : float) : Vector2
    +{static}RIGHT(length : float) : Vector2
    - {static} Epsilon:float = 0.01f
    - x : float
    - y : float
    +{static} random() : Vector2
    +{static} random(large: float) : Vector2


    +x():float
    +y():float
    +Vector2(x1,y1 : double)
    +Vector2(x1,y1 : float)
    +sum(other : Vector2):Vector2
    +sub(other : Vector2):Vector2
    +scalarProd(other : Vector2):float
    +length():float
    +lengthSq():float
    +div(real:float):Vector2
    +prod(real:float):Vector2
    +norma():Vector2
    +rot(angle:float):Vector2
    +getAngle(other:Vector2):float
    +rotateUnary(angle:float):Vector2
    +getUnaryAngle(other:Vector2):float
    +near(other:Vector2):boolean
    +equals(other:Vector2):boolean ++
    +swapped():Vector2
    +mirrorY():Vector2
    +mirrorX():Vector2
    +withLength(length:float):Vector2
    +getRight():Vector2
    +getRight(length:float):Vector2
    +distanceTo(other:Vector2):float
    +half():Vector2
    +isOver(other:Vector2):boolean
    +isUnder(other:Vector2):boolean
    +isLeft(other:Vector2):boolean
    +isRight(other:Vector2):boolean
    +v3(z:float):Vector3
    +v3():Vector3
    +withMaxLength(max:float):Vector2
    +toDimension():Dimension
    +toString():String++
}
interface IClonable<ClonableType>{
    +clone():ClonableType
}

IClonable <|-- Rect

class Rect
{
    -min:Vector2
    -max:Vector2
    +Rect(max:Vector2,min:Vector2)
    +max():Vector2
    +prod(factor:float):Rect
    +clone() : Rect +
}
class RowCol
{
    -row:int
    -col:int
    + RowCol(row:int,col:int)
    +getCol():int
    +getRow():int
}
class Tuple<T1,T2>{
    -element1:T1
    -element2:T2
    +Tuple(element1:T1,element2:T2)
    +{static}<TA,TB> get(TA c1, TB c2) :Tuple<TA,TB>
    + get2():T2
    + get1():T1
}
class Vector3{
    - x:float
    - y:float
    - z:float
    +Vector3(x,y,z : float)
    +{static} get(x,y,z : float) : Vector3
    + xy():Vector2
    + z():float
}

skinparam classAttributeIconSize 0
class LookTarget{

    +LookTarget(playerTransform:Transform)
    +update()++
}
abstract class Component
Component <|-- LookTarget
LookTarget -- "1" Transform: target >

class FireFrequency{
    - shootFrequency:final int
    - i:int

    +FireFrequency(shootFrequency:int, arsenal:Arsenal)
    + update()++
    + onDestroy()++
}
Component <|-- FireFrequency
FireFrequency -- "1" Arsenal: weapons >
class MouseFollower{
    - angle:float

    +MouseFollower(angle:float)

    +start()++
    + update()++
    + onDestroy()++
}
Component <|-- MouseFollower
MouseFollower --"1" AbstractDirectionalInput: Dir >
class SimpleBullet{
    - speed:final float

    + SimpleBullet(speed: float)

    + update()++
}
Component <|-- SimpleBullet



skinparam classAttributeIconSize 0

Component <|--- HitBox
HitBox "transform" *-- "1" Transform
HitBox "entity" *-- "1" Entity
class HitBox{
    - dimensions : Vector2
    +{static} NoCheckDistance : int = 500
    +{static} getOne(w,h : float , entity:Entity): HitBox
    +{static} getOne(dimensions : Vector2 , entity:Entity): HitBox

    -HitBox(dimensions : Vector2 , entity:Entity)
    +getEntity():Entity

    ~checkCollision(other:HitBox):CollisionData

    - vertices() : [Vector2]
    - diagonalLength() : float
    - distToCenter(v : Vector2) : float
    - isFar(other: Transform) : boolean
    - vertexInside(other : HitBox): Vector2
    - bottomLeft(): Vector2
    - topRight(): Vector2
    - bottomSide(): Vector2
    - leftSide(): Vector2

}

HitBoxesLayer "hitBoxes" o--- "0..*" HitBox


class HitBoxesLayer{
    ~ HitBoxesLayer()
    + addHitBox(hitBox : HitBox)
    + removeHitBox(hitBox : HitBox)
    + iterator() : [HitBox]
    + checkLayer(other:[HitBox])
    + contains(hitBox : HitBox) : boolean
    - condition(mine,their : HitBox) : boolean
}

Component <|-- HitBoxManager

HitBoxManager *-- "8" HitBoxesLayer

class HitBoxManager{
    - {static} HitBoxManager instance;
    + {static} HitBoxManager getInstance;

    + {static} PLAYER : int = 0
    + {static} ENEMIES : int = 1
    + {static} PLAYERBULLET : int = 2
    + {static} ENEMYBULLET : int = 3
    + {static} BARRICADE_BOTH: int  =4
    + {static} BARRICADE_ENEM: int  =5
    + {static} REWARDS : int = 6
    + {static} SHIELD : int = 7
    + {static} CANT : int = 8

    + update() ++
    + addHitBox(hitBox: HitBox, layer : int)
    + removeHitBox(hitBox: HitBox)

    - toAdd : map<int, [HitBox]>
    - toRemove : map<int, [HitBox]>
    - connection : [Tuple<int,int>]
    - inputData : String
    - long i=0
    - HitBoxesManager()
    - checkQueues()
    - makeACheck()

}


Entity "1" o-- "mine" CollisionData
Entity "1" o-- "their" CollisionData


class CollisionData{
    - contactPoint : Vector2
    + mine() : Entity
    + their() : Entity
    + contactPoint(): Vector2
    + CollisionData(mine,their : Entity , contactPoint : Vector2)

}

skinparam classAttributeIconSize 0

Entity o-- "1" GameObject: -referenced >
Entity -- "1" Runnable: -doOnDeath >
Entity o-- "1" EntityData: #data >
Entity -- "1" VisitorEntity: #visitor >

abstract class Entity {


	#Entity(referenced:GameObject)


	+observerHealth():IBroadcaster<Float>

	+setOnDeath(doOnDeath:Runnable)

	+onDeath()


	+setData(data:EntityData)

	+data():EntityData

	+setRenderer(rend:Renderizable)

	+setHitBox(hitBox:HitBox)

	+addBehaviour(comp:Component)

	+referenced():GameObject
    +alive():boolean

	+reportCollision( data:CollisionData)
	 {abstract} +void accept(visitor:VisitorEntity)

	 +setVisitor( visitor:VisitorEntity)
}

EntityData -- "1" IBroadcaster: -HealthData >
note on link: IBroadCaster<Float>
EntityData -- "1" Invoker: -HealthDataInvoker >
note on link: Invoker<Float>
class EntityData
{

    -health:float
    -damage:float
    -shield:float
    -initialHealth:final float

    +EntityData(float health, float damage, float shield)

    +getHealthObservable():IBroadcaster<Float>

    +{static} WithEqualsValues( v:float):EntityData

    +clone():EntityData

    +getShield():float

     +getDamage():float

     +getHealth():float

     +getInitialHealth():float

     +setShield( shield:float)

     +setHealth( health:float)

     +setInitialHealth( initialHealth:float)

     +setDamage( damage:float)

     +takeDamage( damage:float)
}

Component <|-- EveryOne
EveryOne -- "1" EveryOne: -instance
note on link: static
EveryOne -left- "*" VisitorEntity: -visitors >
EveryOne -left- "*" Entity: -entities >
EveryOne -left- "*" Entity: -toAdd >
EveryOne -left- "*" Entity: -toDestroy >
class EveryOne
{
    - far: float = 2000

    + {static} getInstance()EveryOne

    -EveryOne()

    +update()++

    +add( ent:Entity)

    +remove(ent:Entity)

    +killIn(ent:Entity, frames:int)


    +killThemAll()

    +takeLazyVisitor(visitor:VisitorEntity)

    +takeVisitor(visitor:VisitorEntity )

    -acceptVisitors()

    -checkDestroyable(e:Entity)

    +getEntities():Iterable<Entity>

}

OtherShip --|> Ship
class OtherShip {

    +OtherShip(referenced:GameObject , weapons:Arsenal )

    +accept(visitor:VisitorEntity )
}

PlayerBullet --|> Bullet
class PlayerBullet{
	+PlayerBullet(referenced:GameObject )
	+accept(visitor:VisitorEntity )
}

ShipAction --|> Consumer
note on link: Consumer<Vector2>
Ship "1" -- ShipAction
ShipAction -- "1" Consumer
note on link: Consumer<Ship>
class ShipAction{
    +ShipAction(ship:Ship , shipConsumer:Consumer<Ship> )
    +accept(vector2:Vector2)
}

BarricadeBoth --|> Entity
class BarricadeBoth{
    + BarricadeBoth(referenced:GameObject)
    + accept(visitor:VisitorEntity)
}

BarricadeEnem --|> Entity
class BarricadeEnem{
    + BarricadeEnem(referenced:GameObject)
    + accept(visitor:VisitorEntity)
}

Bullet --|> Entity
Bullet --|> IBullet
abstract class Bullet{
    #Bullet(referenced:GameObject)
    +transform():Transform
    +entity() :Entity
}

EnemyBullet --|> Bullet
class EnemyBullet{
    +EnemyBullet(referenced:GameObject)
    +accept(visitor:VisitorEntity)
}

BarricadeBothBuilder -- "1" BarricadeBoth
abstract class BarricadeBothBuilder
{
    + create()
    + get():BarricadeBoth
    +{abstract} assembleSprite()
    +{abstract} assembleCollider()
    +{abstract} assembleBehaviours()
    +{abstract} assembleData()
}

BarricadeEnemBuilder -- "1" BarricadeBoth
abstract class BarricadeEnemBuilder
{
    + create()
    + get():BarricadeEnem
    +{abstract} assembleSprite()
    +{abstract} assembleCollider()
    +{abstract} assembleBehaviours()
    +{abstract} assembleData()
}

EnemyBulletBuilder -up|> IBulletBuilder
EnemyBulletBuilder -- "1" EnemyBullet
abstract class EnemyBulletBuilder
{
    + create()+
    + get():EnemyBullet+
}

PlayerBulletBuilder -up|> IBulletBuilder
PlayerBulletBuilder -- "1" PlayerBullet
abstract class PlayerBulletBuilder
{
    + create()+
    + get():PlayerBullet+
}

interface IBulletBuilder<BulletType extends IBullet>{
    + create()
    + get():BulletType
    +{abstract} assembleSprite()
    +{abstract} assembleHitBox()
    +{abstract} assembleBehaviours()
    +{abstract} assembleData()
}

interface IBullet
{
    transform():Transform
    entity():Entity
}

BulletMaker --|> EnemyBulletBuilder
SpriteData "1" -- BulletMaker
Transform "1" -- BulletMaker
class BulletMaker{
    +BulletMaker(tie:Transform)
    +assembleSprite()++
    +assembleHitBox()++
    +assembleBehaviours()++
    +assembleData()++
}

BulletPlayerBuilder --|> PlayerBulletBuilder
SpriteData "1" -- BulletPlayerBuilder
Transform "1" -- BulletPlayerBuilder
class BulletPlayerBuilder{
    +BulletPlayerBuilder(solo:Transform)
    +assembleSprite()++
    +assembleHitBox()++
    +assembleBehaviours()++
    +assembleData()++
}

LaserSaber --|> EnemyBulletBuilder
SpriteData "1" -- LaserSaber
Transform "2" -- LaserSaber
class LaserSaber{
    +LaserSaber(tie:Transform,target:Transform)
    +assembleSprite()++
    +assembleHitBox()++
    +assembleBehaviours()++
    +assembleData()++
}

interface IBulletDirector<BulletType extends Ibullet, BuilderType extends IBulletBuilder<BulletType>>{
    +setBuilder(BuilderType builder)
    +create()
    +assemble()
    +get():BulletType
}

BulletDirector --|> IBulletDirector
IBulletBuilder "1" o-- BulletDirector
class BulletDirector<BulletType extends Ibullet, BuilderType extends IBulletBuilder<BulletType>>{
    +setBuilder(BuilderType builder)+
    +create()+
    +assemble()+
    +get():BulletType+
}

BarricadeEnemBuilder "1" --o BarricadeEnemDirector
class BarricadeEnemDirector{
    +setBuilder(BuilderType builder)
    +create()
    +assemble()
    +get():BarricadeEnem
}

BarricadeBothBuilder "1" --o BarricadeBothDirector
class BarricadeBothDirector{
    +setBuilder(BuilderType builder)
    +create()
    +assemble()
    +get():BarricadeBoth
}

ColdFireMaker --|> PlayerBulletBuilder
class ColdFireMaker{
    + assembleSprite()+
    + assembleHitBox()+
    + assembleBehaviours()+
    + assembleData()+
    - onColdFire()+
}

FireShieldMaker --|> PlayerBulletBuilder
class FireShieldMaker{
    + assembleSprite()+
    + assembleHitBox()+
    + assembleBehaviours()+
    + assembleData()+
}

FireShield --|> Bullet
class FireShield{
    #FireShield(referenced:GameObject)
    +accept(visitor:VisitorEntity)+
}

interface IShip
{
    +addWeapon(Weapon p)
    +getPilot():Pilot
    +setPilot(pilot:Pilot);
}

Ship --|> IShip
Ship --|> Entity
Ship -- "1" Pilot
Ship -- "1" Arsenal
abstract class Ship
{
    #Ship(referenced:GameObject,weapons:Arsenal)
    +onDeath()++
    +addWeapon(Weapon p)+
    +getPilot():Pilot+
    +setPilot(pilot:Pilot);+
    +getArsenal():Arsenal
}

BaseEnemyShip --|> Ship
abstract class BaseEnemyShip{
    #BaseEnemyShip(referenced:GameObject,weapons:Arsenal)
    +getBagPack():Arsenal
}

EnemyShip --|> BaseEnemyShip
abstract class EnemyShip{
    +EnemyShip(referenced:GameObject)
    +accept(visitor:VisitorEntity)+
    +onDeath()++
}

EnemyShipBuilder -- "1" BaseEnemyShip
abstract class EnemyShipBuilder
{
    create()
    get():BaseEnemyShip
    +{abstract} assembleSprite()
    +{abstract} assembleHitBox()
    +{abstract} assembleWeapons()
    +{abstract} assembleBehaviours()
    +{abstract} assembleData()

}

EnemyShipBuilder "1" --  EnemyShipDirector
class EnemyShipDirector{
    +setBuilder(builder:EnemyShipBuilder)
    +create()
    +assemble()
    +get():BaseEnemyShip
}

ShipBoss --|> BaseEnemyShip
class ShipBoss{
    +ShipBoss(referenced:GameObject)
    +accept(visitor:VisitorEntity)+
    +getBagPack():Arsenal++
    +onDeath()++
}

VisitorEntity <|-- ShieldVisitor
Entity "1"--  ShieldVisitor: reward <
PlayerShip "1"--  ShieldVisitor: visitable <
ShieldVisitor "2"--  Renderizable
class ShieldVisitor{
     prevShield:float

    +ShieldVisitor()

    +setReward(reward:Entity)

    @Override
    +visit(visitable:PlayerShip)++

    +restore()

}

DizzyMaker --|> EnemyShipBuilder
class DizzyMaker
{
    +assembleSprite()
    + assembleHitBox()
    + assembleWeapons()
    + assembleBehaviours()
    + assembleData()

}

FastTieMaker --|> EnemyShipBuilder
class FastTieMaker
{
    +assembleSprite()
    + assembleHitBox()
    + assembleWeapons()
    + assembleBehaviours()
    + assembleData()

}

FullKamikazeeMaker --|> EnemyShipBuilder
class FullKamikazeeMaker
{
    +assembleSprite()
    + assembleHitBox()
    + assembleWeapons()
    + assembleBehaviours()
    + assembleData()

}

VaderAMaker --|> EnemyShipBuilder
class VaderAMaker
{
    +assembleSprite()
    + assembleHitBox()
    + assembleWeapons()
    + assembleBehaviours()
    + assembleData()

}

VaderBMaker --|> EnemyShipBuilder
class VaderBMaker
{
    +assembleSprite()
    + assembleHitBox()
    + assembleWeapons()
    + assembleBehaviours()
    + assembleData()

}

VaderCMaker --|> EnemyShipBuilder
class VaderCMaker
{
    +assembleSprite()
    + assembleHitBox()
    + assembleWeapons()
    + assembleBehaviours()
    + assembleData()

}

WachinMaker --|> EnemyShipBuilder
class WachinMaker
{
    +assembleSprite()
    + assembleHitBox()
    + assembleWeapons()
    + assembleBehaviours()
    + assembleData()

}

WhiteTieMaker --|> EnemyShipBuilder
class WhiteTieMaker
{
    +assembleSprite()
    + assembleHitBox()
    + assembleWeapons()
    + assembleBehaviours()
    + assembleData()

}

PlayerShipMaker --|> PlayerShipBuilder
class PlayerShipMaker
{
    +assembleSprite()
    + assembleHitBox()
    + assembleWeapons()
    + assembleBehaviours()
    + assembleData()

}


PlayerShipBuilder -- "1" PlayerShip
abstract class PlayerShipBuilder
{
    create()
    get():PlayerShip
    +{abstract} assembleSprite()
    +{abstract} assembleHitBox()
    +{abstract} assembleWeapons()
    +{abstract} assembleBehaviours()
    +{abstract} assembleData()

}

PlayerShipBuilder -- "1" PlayerShipDirector
class PlayerShipDirector{
    +setBuilder(builder:PlayerShipBuilder)
    +create()
    +assemble()
    +get():PlayerShip
}

PlayerShip --|> Ship
PlayerShip -- PlayerShip:instance
note on link: static
PlayerShip -- "1" PowersDeck
class PlayerShip{
	+{static}getInstance():PlayerShip
	+{static}isUninitialized():boolean
	+{static}initialize(GameObject go)
	+ onDeath()++
	+ accept()+
	+ setLife(cantLife:float)
	+ addSpecial(power:ISpecialPower)
	+getBagPack():Arsenal
}

Component <|-- PlayerShipPerspective
PlayerShipPerspective -- "1" Renderizable
PlayerShipPerspective -- "2" AbstractContinueInput
class PlayerShipPerspective{
    +PlayerShipPerspective(renderizable:Renderizable)
    +update()+
}

IBulletDirector "1" -- Weapon:generator
abstract class Weapon<BulletDirectorType extends IBulletDirector>
{
    - name:String
    + Weapon(BulletDirectorType generator)
    + {abstract} void Shoot();
    + {abstract} void Destroy();
    + isEmpty():boolean
    + setName(String name)
    + spriteName():String
}

IActivable --|> Arsenal
abstract class Arsenal{
    -active:boolean=true
    +{abstract}clone():Arsenal

    +isActive():boolean+
    +setActive(active:boolean)+
    +{abstract}shoot()
    +{abstract}switchCurrent()
    +{abstract}add(w:Weapon)
    +{abstract}remove(w:Weapon)
    +{abstract}isEmpty():boolean
    +{abstract}getCurrent():Weapon
    +{abstract}destroy()
    +{abstract}observer():IBroadCaster<Boolean>
    +{abstract}weapons():Iterable<Weapon>
}

 Arsenal <|-- EnemyArsenal
 Weapon "*" -- EnemyArsenal
 EnemyArsenal -- "1" IBroadcaster
 EnemyArsenal -- "1" Invoker
class EnemyArsenal{
    -index:int=0
    +clone():Arsenal+
    +isActive():boolean+
    +setActive(active:boolean)+
    +shoot()+
    +switchCurrent()+
    +add(w:Weapon)+
    +remove(w:Weapon)+
    +isEmpty():boolean+
    +getCurrent():Weapon+
    +destroy()+
    +observer():IBroadcaster<Boolean>+
    +weapons():Iterable<Weapon>+
}

 Arsenal <|-- PlayerArsenal
 Weapon "*" -- PlayerArsenal
 PlayerArsenal -- "1" IBroadcaster
 PlayerArsenal -- "1" Invoker
class PlayerArsenal{
    +clone():Arsenal+
    +isActive():boolean+
    +setActive(active:boolean)+
    +shoot()+
    +switchCurrent()+
    +add(w:Weapon)+
    +remove(w:Weapon)+
    +isEmpty():boolean+
    +getCurrent():Weapon+
    +destroy()+
    +observer():IBroadcaster<Boolean>+
    +weapons():Iterable<Weapon>+
}

Weapon <|-- ShotFront
Weapon <|-- AngularWeapon
Weapon <|-- GenericWeapon
Weapon <|-- IceWeapon
Weapon <|-- LateralWeapon

ShotFront -- "1" BulletDirector
ShotFront -- "1" Transform
class ShotFront<BulletDirectorType extends IBulletDirector>{
    -phaseShift:float
    +ShotFront(phaseShift:float,getter:BulletDirector,reference:Transform)
    +Shoot()+
    +Destroy()+
}

GenericWeapon -- "1" Transform
class GenericWeapon<BulletDirectorType extends IBulletDirector>{
    -{static} framesDuration:int
    -phaseShift:float
    -cantShoots:int
    +GenericWeapon(cantShoots:int,getter:BulletDirector,reference:Transform)
    +Shoot()+
    +Destroy()+
    +setPhaseShift(phaseShift:float)
}

LateralWeapon -- "1" Transform
class LateralWeapon<BulletDirectorType extends IBulletDirector>{
    -{static} framesDuration:int
    -phaseShift:float
    -cantShoots:int
    +LateralWeapon(cantShoots:int,getter:BulletDirector,reference:Transform)
    +LateralWeapon(getter:BulletDirector,reference:Transform)
    +Shoot()+
    +Destroy()+
    +setPhaseShift(phaseShift:float)
}

AngularWeapon -- "1" Transform
class AngularWeapon<BulletDirectorType extends IBulletDirector>{
    -{static} framesDuration:int
    -tot_ang:float
    -phaseShift:float
    -cantShoots:int
    +AngularWeapon(cantShoots:int,getter:BulletDirector,reference:Transform)
    +AngularWeapon(getter:BulletDirector,reference:Transform)
    +Shoot()+
    +Destroy()+
    +setPhaseShift(phaseShift:float)
}

class IceWeapon<BulletDirectorType extends IBulletDirector>{
    -magazzing:int
    +IceWeapon(getter:BulletDirector,reference:Transform)
    +Shoot()+
    +Destroy()+
}




class VisitorEntity{
    +visit( playerShip: PlayerShip)
    +visit( enemyShip: EnemyShip)
    +visit( otherShip: OtherShip)
    +visit( barricadeEnem: BarricadeEnem)
    +visit( barricadeBoth: BarricadeBoth)
    +visit( playerBullet: PlayerBullet)
    +visit( enemyBullet: EnemyBullet)
    +visit( fireShield: FireShield)
    +visit( weaponReward: WeaponReward)
    +visit( genericReward: GenericReward)
    +visit( shipBoss: ShipBoss)
}
class BarricadeBothVisitor{
    -transform : Transform
    +BarricadeBothVisitor(transform:Transform)
    -getRepulsion(repulsor,repulsado,repulsor_top,repulsado_top : Vector2)
    - bounce(quiet,traveller : Transform)
    +visit( playerBullet: PlayerBullet)++
    +visit( enemyBullet: EnemyBullet)++
}

BossVisitor "-shipBoss" o-- "1"ShipBoss
class BossVisitor{
    +visit( barricadeBoth: BarricadeBoth)++
    +visit( playerShip: PlayerShip)++
    -getRepulsion(repulsor,repulsado,repulsor_top,repulsado_top : Vector2)
    +BossVisitor(shipBoss : ShipBoss)
}
class EnemiesCounter{
    -count:int
    EnemiesCounter()
    +visit( enemyShip: EnemyShip)++
    +getCount():int
}
EnemyBullet "1" --o "bullet" EnemyBulletVisitor
class EnemyBulletVisitor{
    +visit( barricadeBoth: BarricadeBoth)++
    +visit( playerShip: PlayerShip)++
    EnemyBulletVisitor(enemyBullet : EnemyBullet)
}
EnemyShip "1" --o "ship" EnemyVisitor
class EnemyVisitor{
    EnemyVisitor(ship:EnemyShip)
    +visit( playerShip: PlayerShip)++
    +visit( playerBullet: PlayerBullet)++
    +visit( barricadeBoth: BarricadeBoth)++
    -bounce(bouncePoint:Vector2)
}
EntityData "1" --o "mydata" FireShieldEffect
class FireShieldEffect{
    +visit( enemyShip: EnemyShip)++
    +visit( enemyBullet : EnemyBullet)++
}
Entity "1" --o "ent" ForceVisitor
class ForceVisitor{
    +setEntity(entity : Entity)
    +visit(playerShip : PlayerShip)++
}
Entity "1" --o "entity" PlayerBulletVisitor
class PlayerBulletVisitor{
    +PlayerBulletVisitor(bullet : Entity)
    +visit(shipBoss : ShipBoss)++
    +visit(enemyShip : EnemyShip)++
    +visit(ent : BarricadeBoth)++
    +visit(ent : BarricadeEnem)++
}

Entity "0..*" --o "col" GetEnemiesAndBarricades
class GetEnemiesAndBarricades{
    +GetEnemiesAndBarricades(col [Entity])
    +visit(enemyShip : EnemyShip)++
    +visit(ent : BarricadeBoth)++
    +visit(ent : BarricadeEnem)++
}

EnemyShip "0..*" --o "collector" GetEnemies
class GetEnemies{
    +GetEnemies(collector [EnemyShip])
    +visit(enemyShip : EnemyShip)++
}

Transform "1" --o "centerPoint" FreezeVisitor
class FreezeVisitor{
    -time,ratio : float
    +FreezeVisitor(time:float, centerPoint:Transform , ratio:float)
    +visit(enemyShip : EnemyShip)++
    +visit(ship : ShipBoss)++
    -precondition(ship:Entity):boolean
    -reactive(ship:ShipBoss)
    -reactive(ship:EnemyShip)
}

class PlayerVisitor{
    +visit(enemyShip : EnemyShip)++
    +visit(enemyBullet : EnemyBullet)++
}



class Pusher{
    -ratio : float
    -centerPoint : Vector2
    +Pusher(ratio:float, centerPoint:Vector2)
    +visit(enemyShip : EnemyShip)++
    +visit(barricade : BarricadeEnem)++
    +visit(barricade : BarricadeBoth)++
    +visit(bullet : EnemyBullet)++
    - effect(Entity ent)
}

Entity "1" --o "entity" SoloSupportVisitor
Ship "1" --o "ship" SoloSupportVisitor
class SoloSupportVisitor{
    +visit(player:PlayerShip)++
    +setEntity(entity:Entity)
    -createHanSolo()
    -getData()
    -getBehaviour()
    -getRenderer()
    -getWeapons()
}

class WeaponSwitch{
    -active:boolean
    +WeaponSwitch(active:boolean)
    +visit(playerShip:PlayerShip)++
    +visit(enemyShip:EnemyShip)++
}

Weapon "1" --o "weapon" WeaponRewardVisitor
Entity "1" --o "related" WeaponRewardVisitor

class WeaponRewardVisitor{
    +WeaponRewardVisitor(weapon:Weapon,entity:Entity)
    +visit(playerShip:PlayerShip)++
}


Entity "1" --o "mine" VisitorShieldFireReward
FireShieldMaker "1" --o "mine" VisitorShieldFireReward
class VisitorShieldFireReward{
    +VisitorShieldFireReward()
    +setEntity(ent:Entity)
    +visit(playerShip : PlayerShip)++
}

Entity "1" --o "reward" VisitorHealPotion
class VisitorHealPotion{
    -potion:float = 100
    +VisitorHealPotion()
    +setReward(rew:Entity)
    +visit(playerShip : PlayerShip)++
}

Weapon "1" --o "weapon" WeaponRewardVisitor
Entity "1" --o "related" WeaponRewardVisitor
class WeaponRewardVisitor{
    WeaponRewardVisitor()
    +visit(playerShip : PlayerShip)++
}


RuntimeException <|-- TimeLineException
class TimeLineException{
    TimeLineException(msg:String)
}


skinparam classAttributeIconSize 0

class GameSettings{
    + TieBulletSpeed: final float
    + TieSpeed: final float
    + FirstBossSpeed: final float
    + PlayerBulletSpeed: final float

    -GameSettings()

    + {static} GetInstance():GameSettings
    + bounds():Rect
    + PlaceHolderData(): EntityData
}
GameSettings --"1" GameSettings: (static) -instance
GameSettings --"1" ISettingsParser: -parser >
GameSettings -- EntityData:PlayerInitialData >
GameSettings -- EntityData:PlayerData >
GameSettings -- EntityData:TieData >
GameSettings -- EntityData:TieBulletData >
GameSettings -- EntityData:FirstBossData >

enum EntityEnum {
PlayerData
TieData
TieBulletData
PlayerBulletData
FirstBossData
}

enum FloatEnum{
    TieBulletSpeed
    TieSpeed
    FirstBossSpeed
    PlayerBulletSpeed
}

class CurrentMatchData{
    -score:int = 0
    -CurrentMatchData()

    + getMatchData: CurrentMatchData
    + currentScore:int
    + incScore()
    + resetScore()

}
CurrentMatchData -- IBroadcaster: OnScoreChanges: IBroadcaster<Integer>
CurrentMatchData -- Invoker: invokerScoreChanges: Invoker<Integer>

 interface ISettingsParser
{
    {abstract}+getEntityData(EntityEnum ref):EntityData
    {abstract}+getFloat(FloatEnum ref):float
    {abstract}+FPS():int
    {abstract}+sizeWindow():Dimension

}
 class FileSettingsParser
{
    - FPS:int
    - floatInput: [float]
    +getEntityData(EntityEnum ref):EntityData
    +getFloat(FloatEnum ref):float
    +FPS():int
    +sizeWindow():Dimension
}
FileSettingsParser -- "1" Dimension : sizeWindow >
FileSettingsParser -- "*" EntityData
ISettingsParser <|-- FileSettingsParser


interface ILostOrWin {
     {abstract}+AllianceWins()
     {abstract}+EmpireWins()
}

class LostOrWin {
     -made:boolean
     +AllianceWins()
     +EmpireWins()
     -creditsAndClose()
}
ILostOrWin <|-- LostOrWin
class MatchResult {
     +AllianceWins()
     +EmpireWins()
     +getInstance(): MatchResult
     -creditsAndClose()
}
ILostOrWin <|-- MatchResult
MatchResult -- MatchResult:Instance
MatchResult -- "1" ILostOrWin: Deriva



@enduml